@page "/account/identity/login"

@layout AuthenticationLayout

<EditForm Model="LoginModel" OnValidSubmit="LoginAsync">
	<div class="card border-primary shadow-lg text-dark p-5" style="opacity:0.8; margin-top:30%; min-width:350px; border-radius:24px;">
		<div class="card-header text-dark fs-4 border-primary text-center">Sign in</div>
		<div class="card-body" style="opacity:1;">
			<DataAnnotationsValidator />

			<p class="text-center mb-4">
				Need an account? <a href="/signup" class="text-primary text-decoration-none">Sign up</a>
			</p>

			<!-- Campos de formulario -->
			<div class="mb-3">
				<FloatingText class="form-control"
							  Label="Email"
							  Placeholder="email@email.com"
							  @bind-Value="LoginModel.Email" />
			</div>

			<div class="mb-3 position-relative">
				<FloatingText Label="Password"
							  Type="@PasswordType"
							  class="form-control"
							  @bind-Value="LoginModel.Password"
							  placeholder="Enter Password" />

				<a class="position-absolute end-0 top-50 translate-middle-y me-2"
				   @onclick="ChangePasswordType" style="z-index: 5;">
					<small class="text-primary">@DisplayText</small>
				</a>
			</div>

			<div class="d-flex justify-content-between align-items-center mb-4">
				<div class="form-check">
					<input type="checkbox" class="form-check-input" id="rememberMe" />
					<label class="form-check-label" for="rememberMe">Remember me</label>
				</div>
				<a href="/forgot-password" class="text-primary text-decoration-none small">Forgot Password?</a>
			</div>

			<div class="d-grid gap-2">
				<button class="btn btn-success" type="submit">Sign In</button>
			</div>
		</div>
	</div>
</EditForm>

@if (IsOpen)
{
	<!-- Tu modal existente se mantiene igual -->
	<div class="modal show d-block" tabindex="-1">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Error</h5>
					<button type="button" class="btn-close" @onclick="CloseModal"></button>
				</div>
				<div class="modal-body">
					<p>@ModalMessage</p>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show"></div>
}

@code {
	public bool IsOpen { get; set; }
	public string? SelectionAction { get; set; }
	string? Message;
	public string? BorderClass = "border-success rounded p-2 ml-2 mr-2";
	public string? ButtonClass = "btn btn-success";
	public LoginDTO LoginModel { get; set; } = new()
	{
		Email = "abisaidfarias@gmail.com",
		Password = "@Admin1234"
	};

	private async Task LoginAsync()
	{
		try
		{
			ResetButtons();
			var response = await accountService.LoginAccountAsync(LoginModel);
			if(response.Flag)
			{
				var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
				await customAuthStateProvider.UpdateAuthenticationState(new LocalStorageDTO()
				{
						Token = response.Token,
						Refresh = response.RefreshToken,
				});
				NavigationManager.NavigateTo("content/home", false, true);
			}
			else
			{
				Message = response.Message;
				DangerBorderAndButton();
				ShowModal(Message);
				IsOpen = true;
			}
		}
		catch
		{
			Message = "Sorry, unknown error occured";
			DangerBorderAndButton();
			ShowModal(Message);
			IsOpen = true;	
		}	

	}
	private string? PasswordType = "password";
	private bool PasswordState = true;
	private string DisplayText = "Show";
	private void ChangePasswordType()
	{
		PasswordState = !PasswordState;
		if (!PasswordState)
		{
			PasswordType = "text";
			DisplayText = "Hide";
		}
		else
		{
			PasswordType = "password";
			DisplayText = "Show";
		}
	}
	[CascadingParameter]
	public Task<AuthenticationState>? ClientAuthState { get; set; }
	protected override async Task OnInitializedAsync()
	{
		try
		{
			if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
			{
				NavigationManager.NavigateTo("content/home", false, true);
			}
			else
			{
				NavigationManager.NavigateTo("account/identity/login", false, true);
			}
		}
		catch (Exception ex)
		{
			Message = ex.Message;
			IsOpen = true;
			StateHasChanged();
		}
	}
	void DangerBorderAndButton()
	{
		BorderClass = "border-danger rounded p-2 ml-2 mr-2";
		ButtonClass = "btn btn-danger";
	}
	void ResetButtons()
	{
		BorderClass = "border-success rounded p-2 ml-2 mr-2";
		ButtonClass = "btn btn-success";
	}
	void ButtonActions(string action)
	{
		if (action == "ok")
		{
			IsOpen = false;
		}
	}
	private string ModalMessage = "";

	private void ShowModal(string message)
	{
		ModalMessage = message;
		IsOpen = true;
	}

	private void CloseModal()
	{
		IsOpen = false;
	}
}
