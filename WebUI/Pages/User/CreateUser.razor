@page "/user/create"
@attribute [Authorize(Roles = "Admin")]

<EditForm Model="UserModel" OnValidSubmit="CreateUserAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h2 class="text-xl font-semibold text-gray-800 mb-6">User’s Profile Details</h2>

    <div class="max-w-5xl bg-white p-6 rounded shadow mx-auto space-y-6">
        <!-- Avatar -->
        <div class="flex items-center space-x-4">
            <div class="relative">
                <img src="images/avatar-placeholder.png" alt="Avatar"
                     class="w-24 h-24 rounded-lg object-cover shadow" />
                <button type="button"
                        class="absolute top-0 right-0 bg-white p-1.5 rounded-full shadow text-gray-500 hover:text-blue-600">
                    <span class="material-symbols-outlined text-sm">edit</span>
                </button>
            </div>
        </div>

        <!-- Form Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">First Name</label>
                <InputText @bind-Value="UserModel.FirstName" class="input" />
                <ValidationMessage For="@(() => UserModel.FirstName)" />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
                <InputText @bind-Value="UserModel.LastName" class="input" />
                <ValidationMessage For="@(() => UserModel.LastName)" />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                <InputText @bind-Value="UserModel.Email" class="input" />
                <ValidationMessage For="@(() => UserModel.Email)" />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Role</label>
                <select @bind="UserModel.Role" class="input">
                    <option value="">-- Select Role --</option>
                    <option value="Admin">Admin</option>
                    <option value="Teacher">Teacher</option>
                    <option value="Parent">Parent</option>
                </select>
                <ValidationMessage For="@(() => UserModel.Role)" />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">School Name</label>
                <InputText @bind-Value="UserModel.SchoolName" class="input" />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Position</label>
                <InputText @bind-Value="UserModel.Position" class="input" />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Classroom Assigned</label>
                <InputText @bind-Value="UserModel.ClassroomAssigned" class="input" />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Date of Birth</label>
                <InputDate @bind-Value="UserModel.DateOfBirth" class="input" />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
                <InputDate @bind-Value="UserModel.StartDate" class="input" />
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">End Date</label>
                <InputDate @bind-Value="UserModel.EndDate" class="input" />
            </div>
        </div>

        <div class="pt-4 flex justify-end">
            <button type="submit"
                    class="flex items-center justify-center gap-2 bg-[#FF8C00] hover:bg-[#e67600] text-white px-6 py-2 rounded-lg font-semibold text-sm shadow transition disabled:opacity-50"
                    disabled="@IsLoading">
                <span class="material-symbols-outlined text-base animate-spin" hidden="@(IsLoading == false)">sync</span>
                @(IsLoading ? "Creating..." : "Create User")
            </button>
        </div>

        @if (!string.IsNullOrWhiteSpace(SuccessMessage))
        {
            <div class="mt-4 text-green-600">@SuccessMessage</div>
        }
    </div>
</EditForm>

@if (IsOpen)
{
    <!-- Modal de error -->
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Error</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <p>@ModalMessage</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    public bool IsOpen { get; set; }
    public bool IsLoading { get; set; } = false;
    public string? SuccessMessage { get; set; }
    public CreateAccountDTO UserModel { get; set; } = new();

    private async Task CreateUserAsync()
    {
        try
        {
            IsLoading = true;
            SuccessMessage = null;
            var response = await accountService.CreateAccountAsync(UserModel);
            if (response.Flag)
            {
                SuccessMessage = "User created successfully. Activation email sent.";
                UserModel = new(); // limpia el form
            }
            else
            {
                ShowModal(response.Message);
            }
        }
        catch (Exception ex)
        {
            ShowModal(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private string ModalMessage = "";
    private void ShowModal(string message)
    {
        ModalMessage = message;
        IsOpen = true;
    }

    private void CloseModal()
    {
        IsOpen = false;
    }
}
